{"name":"Duck-type","tagline":"Duck type system","body":"duck-type\r\n==================\r\nduck type is a JS library, which can be used to verify parameter, define reuseable data structre, mock data... The purpose of duck-type is try to help you to build up 'Complicated But Robust JS Program', especially when you have to teamwork with others, or developing your code based on unstable API.\r\n\r\nintroduce in 5 minutes. \r\n\r\nPrepare in version on nodejs:\r\n```javascript\r\n\tvar duck = require('../duck-type').namespace();\r\n```\r\nPart One, validtion: \r\n---------------------\r\n\r\nlet us get start with examples:\r\n\r\n### example 1\r\nsupport we have to implement a function foo(param1) {...}, and we want to make sure that param1 should be a String\r\n\r\nyou can verify the type of param1 like this:\r\n```javascript\r\n\tfunction foo(param1) {\r\n\t\tduck(param1).is(String);\r\n\t\t...\r\n\t}\r\n```\r\nyou also can verify many parameters at once, like:\r\n```javascript\r\n\tduck(param1, param2).are(String, Number);\t\r\n```\r\n\r\n### example 2\r\n\r\nhow about complex object like:\r\n```javascript\r\n  {\r\n    name:'hello', \r\n    age: 12345\r\n  };\r\n```\r\nyou can verify it like:\r\n```\r\n\tduck(param1).is({\r\n\t  name:String, \r\n\t  age:Number\r\n\t});\r\n```\r\nnote, the following object can also be passed, which means, relative to validator defination, the property can be more, but can not be less:\r\n```javascript\r\n\tduck({             //also can be passed, means the object is compatible with  the type\r\n\t  name:'hello', \r\n\t  age: 12345, \r\n\t  something:'foo'}\r\n\t ).is({name:String, age:Number}); \r\n```\r\n### example 3\r\n\r\nyou can verify the more complicated object like this:\r\n```javascript\r\n\tduck(param1).is({\r\n\t\tname : {\r\n\t\t  first:String, \r\n\t\t  last:String\r\n\t\t},\r\n\t\tage: Number,\r\n\t\tsayHello: Function\r\n\t});\r\n```\t\r\nhere :\r\n  'sayHello': Function means target object which to verified must have a method which named 'sayHello'.\r\n  \r\n  'name', is a nest object.\r\n\r\n### example 4\r\n\r\nFor array, duck-type can support different and interseting pattern:\r\n```javascript\r\n\tduck(x).is([]); //means x must be a array, it eaual to is(Array)\r\n\t\r\n\tduck(X).is([Number]); //means x must be a array, and each element of the array must be a Number\r\n\t\r\n\tduck(X).is([Number,String,Date]); \r\n\t//means x must be a array, and the first element  must be a Number, the second element must be a String....\r\n```\r\nOf cause, you can combine defination of array and defination of object, like;\r\n```javascript\r\n  duck(param1).is({\r\n    title: String,\r\n    description: String,\r\n      resourceDemands: [{\r\n\t\t  resourceTypeId: Number,\r\n\t\t  year: Number,\r\n\t\t  month: Number,\r\n\t\t  quantity: Number\r\n\t\t  }]\r\n  })\r\n```\r\nPart Two, define data structure, so-called duck type:\r\n-----------------------\r\nDon't stop with verify. Declare the data structure and re-use them might be a better choice.\r\n\r\n### example 5\r\n\r\nHow to define type? Just do it like:\r\n```javascript\r\n  duck.type('ResourceDemand',{\t//now, we defined a type ResourceDemand\r\n\t\tresourceTypeId: Number,\r\n\t\tyear: Number,\r\n\t\tmonth: Number,\r\n\t\tquantity: Number\r\n\t});\r\n```\r\n\r\nAnd how to use it? It is easy.\r\n```javascript\r\n\tduck(param1).is(duck.ResourceDemand);\r\n```\r\n### example 6\r\n\r\nYou can define some basic type, even like java.lang.Integer\r\n```javascript\r\n\tduck.type('Integer',function(value){\r\n\t\treturn duck(value).is(Number) && value % 1 === 0 && value >= -2147483648 && value <= 2147483647;\r\n\t});\r\n```\r\nYou also can define bussiness type like:\r\n```javascript\r\n\tduck.type('Email', function(value) {\r\n\t\t...\r\n\t});\r\n\t\r\n\tduck.type('IpAddress', function(value) {\r\n\t\t...\r\n\t})\r\n```\t\r\nHere, the callback function will be as a validator when test target, and the target will be pass to callback by parameter 'value'.\r\n\r\n### example 7\r\n\r\nYou can leverage type which alreay definedto defined your new type, I mean:\r\n```javascript\r\n\tduck.type('Proposal',{\r\n\t\tid: duck.Integer\r\n\t\ttitle: String,\r\n\t\tdescription: String,\r\n\t\tresourceDemands: [duck.ResourceDemand]\r\n\t});\t\r\n```\r\n\r\nPart Three, mock data:\r\n-------------------------\r\nType define first is encouraged, it is practice of 'Convention First'. And if your have defined a type already. 'mock' is another benefit provoided by duck-type.\r\n\r\n### example 8\r\n```javascript\r\n\tduck.mock(duck.Proposal); //it will return an object, which must compatible with type Proposal.\r\n```\r\nI mean, \r\n```javascript\t\r\n\t{\r\n\t  id: 112,\r\n\t\ttitle: 'sdfasf adsf',\r\n\t\tdescription: 'sdfsdf sdf 234s sd',\r\n\t\tresourceDemands: [{\r\n\t\t\tresourceTypeId: 123,\r\n\t\t\tyear: 2343,\r\n\t\t\tmonth: 234,\r\n\t\t\tquantity: 444\r\n\t\t}]\r\n\t}\r\n```\r\nThe object like above might be return, of cause, most of value will be changed randomly.\r\n\r\nType define first. then start your work with mock data, then verify parameter at product  runtime.\r\n\r\nEnd\r\n--------------------------\r\nThe library duck-type is still developing continully, and we except any of your comments. Thanks :) \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}