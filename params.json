{"name":"Duck-type","tagline":"Provide a natural way to define and validate data structure in JavaScript","body":"# duck-type\r\n\r\nDuck type is a schema and validator JavaScript library, which provide a **natural way** to define schema and validate your data structure in JavaScript. The purpose of this library is try to help you to build up 'Complicated But Robust JavaScript Program', especially when you have to teamwork with other peoples, or developing your code based on unstable API.\r\n\r\n## Getting Started \r\n\r\nCurrently, duck-type can support both NodeJS and browser:\r\n```Bash\r\n   ## in node\r\n   npm install duck-type\r\n```\r\nOr\r\n```Bash\r\n   ## in browser\r\n   bower intall duck-type\r\n```\r\n\r\nand, use it in your code, like:\r\n```javascript\r\n  // in node \r\n  var schema = require('../duck-type').create();\r\n```\r\nOr\r\n```javascript\r\n  // in browser, global variable  duckType\r\n  var schema = duckType.create();\r\n```\r\nOr\r\n```javascript\r\n  // in browser, requirejs/amd  duckType\r\n  define(['./scripts/duck-type.js'],function(duckType) {\r\n     var schema = duckType.create();\r\n  });\r\n```\r\n\r\n### Validation: \r\n\r\nLet us get start with validation:\r\n\r\n#### Example 1\r\nWe wish that 'x' should be a String, we can verify the type of 'x' like this:\r\n```JavaScript\r\n  function foo(x) {\r\n    schema.assert(param1).is(x);\r\n    ...\r\n  }\r\n```\r\nWe also can verify many parameters at once, like:\r\n```JavaScript\r\n    schema.assert(x, y).are(String, Number);\t\r\n```\r\n\r\n#### Example 2\r\n```\r\nWe can verify complex object by schema like:\r\n```\r\n  schema.assert(x).is({\r\n    name:String, \r\n    age:Number\r\n  });\r\n```\r\n\r\n#### Example 3\r\n\r\nEven support **\"nest\"** schema like this:\r\n```JavaScript\r\n  schema.assert(x).is({\r\n    name : {\r\n      first:String, \r\n      last:String\r\n    },\r\n    age: Number,\r\n    sayHello: Function\r\n    });\r\n```\t\r\nHere :\r\n\r\n  'sayHello': Function means target object which to verified must have a method named 'sayHello'.\r\n  \r\n  'name', is a nest schema.\r\n\r\n#### Example 4\r\n\r\nFor array, duck-type can support different pattern:\r\n```JavaScript\r\n  schema.assert(x).is([]); //x must be a array, element can by any type\r\n\t\r\n  schema.assert(X).is([Number]); //x must be a array, element must be a Number\r\n\t\r\n  schema.assert(X).is([Number, String, Date]); \r\n  /*\r\n    means x must be a array, \r\n    and the first element  must be a Number, \r\n    the second element must be a String....\r\n  */\r\n```\r\n\r\nOf cause, we can combine definition of array and object, like;\r\n```JavaScript\r\n  schema.assert(x).is({\r\n    title: String,\r\n    description: String,\r\n      resourceDemands: [{\r\n        resourceTypeId: Number,\r\n        year: Number,\r\n        month: Number,\r\n        quantity: Number\r\n    }]\r\n  })\r\n```\r\n\r\n### Define schema:\r\n\r\nSave schema as **\"type\"** to re-use them.\r\n\r\n#### Example 5\r\n\r\nDefine a type:\r\n```JavaScript\r\n  schema.type('ResourceDemand',{\t//now, we defined a type ResourceDemand\r\n    resourceTypeId: Number,\r\n    year: Number,\r\n    month: Number,\r\n    quantity: Number\r\n  });\r\n```\r\n\r\nRe-use type.\r\n```JavaScript\r\n\tschema.assert(x).is(schema.ResourceDemand);\r\n```\r\n#### Example 6\r\n\r\nWe can define some basic type, even like java.lang.Integer\r\n```JavaScript\r\n\tschema.type('Integer',function(value){\r\n\t\treturn schema.assert(value).is(Number) && value % 1 === 0 && value >= -2147483648 && value <= 2147483647;\r\n\t});\r\n```\r\nHere, by define the validate function we can decided what is 'Integer' in our program.\r\n\r\n#### Example 7\r\n\r\nDefined new type by leverage existing type, I mean:\r\n```JavaScript\r\n  schema.type('Proposal',{\r\n    id: schema.Integer\r\n    title: String,\r\n    description: String,\r\n    resourceDemands: [schema.ResourceDemand]\r\n});\t\r\n```\r\n\r\n### Other interesting features:\r\n\r\n#### Example 8\r\n\r\n##### Generate data. \r\n\r\n'Generate' is another interesting feature provided by duck-type.\r\n\r\n```JavaScript\r\n  schema.generate(schema.Proposal);  //it will return an object, which must compatible with type Proposal.\r\n```\r\nI mean, \r\n```javascript\t\r\n  {\r\n    id: 112,\r\n    title: 'sdfasf adsf',\r\n    description: 'sdfsdf sdf 234s sd',\r\n    resourceDemands: [{\r\n      resourceTypeId: 123,\r\n      year: 2343,\r\n      month: 234,\r\n      quantity: 444\r\n    }]\r\n  }\r\n```\r\nThe object like above might be return, of cause, most of value will be changed **randomly**.\r\n\r\n#### Example 9\r\n\r\n##### Optional property\r\n\r\nThe type can define optional property for an object by using function schema.optional.\r\n\r\n```JavaScript\r\n  schema.type('Profile', {\r\n    name: String,\r\n    skill: schema.optional(String)\r\n  });\r\n```\r\nHere, skill' is a **optional property**, it can be undefined, BUT, if it has value, the value must be a String.\r\n\r\n#### Example 10\r\n\r\n##### Operator: And, Or\r\n\r\nDynamic data type of arguments is common in JavaScript. which means we need operator 'Or',\r\n\r\n```JavaScript\r\n  schema.assert(x).is(schema.or(String, Number));\r\n```\r\nHere, the value of parameter 'x' can be a String, or can be a Number.\r\n\r\n#### Example 11\r\n\r\n##### Implement Interfaces\r\n\r\nIn Java world, we often need make sure a Object must implement Interface A, Interface B... Similarly, operator 'And' can used for this purpose in JavaScript.\r\n\r\n```JavaScript\r\n  schema.type('Config',{ //here is definition of type 'Config'\r\n    orderBy:String\r\n    layout: String\r\n  });\r\n\r\n schema.type('Query',{ //here is definition of type 'Query'\r\n    table: String,\r\n    id: Number\r\n  });\r\n\r\n schema.assert(x).is(schema.and(schema.Config, schema.Query)); \r\n```\r\nHere, we want to make sure the value of 'x' must implement type 'Config', and type 'Query' at same time.\r\n\r\n###End\r\n\r\nThe library duck-type is still developing continually, more interesting feature will be bring to you. We also except any of your comments. \r\n\r\n----------------\r\nMore information can be get by accessing [Wiki page](https://github.com/js-fullstack/duck-type/wiki)\r\n\r\nThanks :) \r\n\r\n","google":"duck-type-000000-01","note":"Don't delete this file! It's used internally to help with page regeneration."}