{"name":"Duck-type","tagline":"Provide a natural way to define and validate data structure in JavaScript","body":"# duck-type\r\n\r\nDuck type is a JavaScript library, which provide a **natural way** to define and validate your data structure in JavaScript. The purpose of this library is try to help you to build up 'Complicated But Robust JavaScript Program', especially when you have to teamwork with other peoples, or developing your code based on unstable API.\r\n\r\n## Getting Started \r\n\r\nCurrently, duck-type can only support version on NodeJS:\r\n```Bash\r\n   npm install duck-type\r\n```\r\nand, use it in your code, like:\r\n```javascript\r\n  var duck = require('../duck-type').instance();\r\n```\r\n### Validation: \r\n\r\nLet us get start with validation:\r\n\r\n#### Example 1\r\nSuppose we have to implement a function:\r\n```JavaScript\r\n  function foo(param1) {\r\n    ...\r\n  }\r\n``` \r\nand we want to make sure that 'param1' should be a String, we can verify the type of 'param1' like this:\r\n```JavaScript\r\n  function foo(param1) {\r\n    duck(param1).is(String);\r\n    ...\r\n  }\r\n```\r\nWe also can verify many parameters at once, like:\r\n```JavaScript\r\n    duck(param1, param2).are(String, Number);\t\r\n```\r\n\r\n#### Example 2\r\n\r\nHow about complex object like:\r\n```JavaScript\r\n  {\r\n    name:'hello', \r\n    age: 12345\r\n  };\r\n```\r\nWe can verify it like:\r\n```\r\n  duck(param1).is({\r\n    name:String, \r\n    age:Number\r\n  });\r\n```\r\nNote, the following object can also be passed, which means, relative to definition, the properties can be 'more', but can not be 'less':\r\n```JavaScript\r\n  duck({             //also can be passed, means the object is compatible with  the type\r\n    name:'hello', \r\n    age: 12345, \r\n    something:'foo'}\r\n  ).is({\r\n    name:String, \r\n    age:Number\r\n  }); \r\n```\r\n#### Example 3\r\n\r\nWe can verify the more complicated object like this:\r\n```JavaScript\r\n  duck(param1).is({\r\n    name : {\r\n      first:String, \r\n      last:String\r\n    },\r\n    age: Number,\r\n    sayHello: Function\r\n    });\r\n```\t\r\nHere :\r\n\r\n  'sayHello': Function means target object which to verified must have a method named 'sayHello'.\r\n  \r\n  'name', is a nest object.\r\n\r\n#### Example 4\r\n\r\nFor array, duck-type can support different pattern:\r\n```JavaScript\r\n  duck(x).is([]); //means x must be a array, it eaual to is(Array)\r\n\t\r\n  duck(X).is([Number]); //means x must be a array, and each element of the array must be a Number\r\n\t\r\n  duck(X).is([Number,String,Date]); \r\n  //means x must be a array, and the first element  must be a Number, the second element must be a String....\r\n```\r\nOf cause, we can combine definition of array and object, like;\r\n```JavaScript\r\n  duck(param1).is({\r\n    title: String,\r\n    description: String,\r\n      resourceDemands: [{\r\n        resourceTypeId: Number,\r\n        year: Number,\r\n        month: Number,\r\n        quantity: Number\r\n    }]\r\n  })\r\n```\r\n\r\n### Define our data structure, so-called duck type:\r\n\r\nDon't stop with verify. Declare the data structure and re-use them might be a better choice.\r\n\r\n#### Example 5\r\n\r\nHow to define type? Just do it like:\r\n```JavaScript\r\n  duck.type('ResourceDemand',{\t//now, we defined a type ResourceDemand\r\n    resourceTypeId: Number,\r\n    year: Number,\r\n    month: Number,\r\n    quantity: Number\r\n  });\r\n```\r\n\r\nAnd how to use it? It is easy.\r\n```JavaScript\r\n\tduck(param1).is(duck.ResourceDemand);\r\n```\r\n#### Example 6\r\n\r\nWe can define some basic type, even like java.lang.Integer\r\n```JavaScript\r\n\tduck.type('Integer',function(value){\r\n\t\treturn duck(value).is(Number) && value % 1 === 0 && value >= -2147483648 && value <= 2147483647;\r\n\t});\r\n```\r\nHere, by define the validate function we can decided what is 'Integer' in our program.\r\n\r\n#### Example 7\r\n\r\nWe can defined new type by leverage data structure which have already defined, I mean:\r\n```JavaScript\r\n  duck.type('Proposal',{\r\n    id: duck.Integer\r\n    title: String,\r\n    description: String,\r\n    resourceDemands: [duck.ResourceDemand]\r\n});\t\r\n```\r\n\r\n### Other interesting features:\r\n\r\n#### Example 8\r\n\r\n##### Mock data. \r\n\r\nType define first is encouraged, it is practice of 'Convention First'. And if your have defined a type already. 'mock' is another benefit provided by duck-type.\r\n\r\n```JavaScript\r\n  duck.mock(duck.Proposal);  //it will return an object, which must compatible with type Proposal.\r\n```\r\nI mean, \r\n```javascript\t\r\n  {\r\n    id: 112,\r\n    title: 'sdfasf adsf',\r\n    description: 'sdfsdf sdf 234s sd',\r\n    resourceDemands: [{\r\n      resourceTypeId: 123,\r\n      year: 2343,\r\n      month: 234,\r\n      quantity: 444\r\n    }]\r\n  }\r\n```\r\nThe object like above might be return, of cause, most of value will be changed randomly.\r\n\r\n#### Example 9\r\n\r\n##### Optional property\r\n\r\nThe type can define optional property for an object by using function duck.optional.\r\n\r\n```JavaScript\r\n  duck.type('Profile', {\r\n    name: String,\r\n    skill: duck.optional([String])\r\n  });\r\n```\r\nHere, 'name' is mandatory property and the value of it must be a String, 'skill' is a **optional property**, it can be undefined, BUT, if it has value, the value must be a array and which elements must be a String.\r\n\r\n#### Example 10\r\n\r\n##### Operator: And, Or\r\n\r\nDynamic data type of arguments is common in JavaScript. which means we need operator 'Or',\r\n\r\n```JavaScript\r\n  Duck.type('Config',{   //here is definition of type 'Config'\r\n    id: Number,\r\n    layout: [String]\r\n  });\r\n  Duck(x).is(duck.or(String, duck.Config));\r\n```\r\nHere, the value of parameter 'x' can be a String, or can be a complex config object.\r\n\r\n#### Example 11\r\n\r\n##### Implement Interfaces\r\n\r\nIn Java world, we often need make sure a Object must implement Interface A, Interface B... Similarly, operator 'And' can used for this purpose in JavaScript.\r\n\r\n```JavaScript\r\n  Duck.type('Config',{ //here is definition of type 'Config'\r\n    orderBy:[String]\r\n    layout: [String]\r\n  });\r\n\r\n Duck.type('Query',{ //here is definition of type 'Query'\r\n    table: String,\r\n    id: Number\r\n  });\r\n\r\n Duck(x).is(duck.and(duck.Config, duck.Query)); \r\n```\r\nHere, we want to make sure the value of 'x' must implement type 'Config', and type 'Query', that means in duck typing world, x can used as a 'Config' object, and also can be used as 'Query' object at same time. \r\n###End\r\n\r\nThe library duck-type is still developing continually, more interesting feature will be bring to you. We also except any of your comments. \r\n\r\n----------------\r\nMore information can be get by accessing [Wiki page](https://github.com/js-fullstack/duck-type/wiki)\r\n\r\nThanks :) \r\n\r\n","google":"duck-type-000000-01","note":"Don't delete this file! It's used internally to help with page regeneration."}